version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: pi5-postgres
    environment:
      POSTGRES_DB: pi5_supernode
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pi5-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pi5_supernode"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pi5-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pi5-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s

  # API Gateway
  api-gateway:
    image: node:18-alpine
    container_name: pi5-api-gateway
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/pi5_supernode
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      NODE_ENV: ${NODE_ENV:-development}
      API_GATEWAY_PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pi5-network
    restart: unless-stopped
    volumes:

  # Network Management Service
  network-service:
    build:
      context: ./backend/network-service
      dockerfile: Dockerfile
    container_name: pi5-network-service
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/pi5_supernode
      NETWORK_SERVICE_PORT: 3001
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    networks:
      - pi5-network
    restart: unless-stopped
    volumes:
      - ./backend/network-service/logs:/app/logs

  # VPN Management Service
  vpn-service:
    build:
      context: ./backend/vpn-service
      dockerfile: Dockerfile
    container_name: pi5-vpn-service
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/pi5_supernode
      VPN_SERVICE_PORT: 3002
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3002:3002"
    depends_on:
      - postgres
    networks:
      - pi5-network
    restart: unless-stopped
    volumes:
      - ./backend/vpn-service/logs:/app/logs
      - /etc/wireguard:/etc/wireguard:ro

  # Automation Service
  automation-service:
    build:
      context: ./backend/automation-service
      dockerfile: Dockerfile
    container_name: pi5-automation-service
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/pi5_supernode
      REDIS_URL: redis://redis:6379
      AUTOMATION_SERVICE_PORT: 3003
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
    networks:
      - pi5-network
    restart: unless-stopped
    volumes:
      - ./backend/automation-service/logs:/app/logs

  # Frontend (for production)
  frontend:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
    container_name: pi5-frontend
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - pi5-network
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pi5-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - frontend
    networks:
      - pi5-network
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: pi5-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pi5-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: pi5-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3100:3000"
    depends_on:
      - prometheus
    networks:
      - pi5-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  pi5-network:
    driver: bridge