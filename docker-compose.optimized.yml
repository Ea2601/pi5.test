# Optimized Docker Compose for Performance and Monitoring
version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # PostgreSQL with performance optimization
  postgres:
    image: postgres:15-alpine
    container_name: pi5-postgres-optimized
    environment:
      POSTGRES_DB: pi5_supernode
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # Performance optimizations
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_RANDOM_PAGE_COST: 1.1
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/sql/init:/docker-entrypoint-initdb.d
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - pi5-network
    logging: *default-logging
    <<: *restart-policy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pi5_supernode"]
      <<: *healthcheck-defaults

  # Redis with optimization
  redis:
    image: redis:7-alpine
    container_name: pi5-redis-optimized
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - pi5-network
    logging: *default-logging
    <<: *restart-policy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *healthcheck-defaults

  # API Gateway with optimizations
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile.optimized
    container_name: pi5-api-gateway-optimized
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/pi5_supernode
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      NODE_ENV: ${NODE_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Performance settings
      UV_THREADPOOL_SIZE: 16
      NODE_OPTIONS: "--max-old-space-size=512 --optimize-for-size"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pi5-network
    logging: *default-logging
    <<: *restart-policy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      <<: *healthcheck-defaults
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Network Service
  network-service:
    build:
      context: ./backend/network-service
      dockerfile: Dockerfile.optimized
    container_name: pi5-network-service-optimized
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/pi5_supernode
      NETWORK_SERVICE_PORT: 3001
      NODE_ENV: ${NODE_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NODE_OPTIONS: "--max-old-space-size=256 --optimize-for-size"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pi5-network
    logging: *default-logging
    <<: *restart-policy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      <<: *healthcheck-defaults
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Nginx with performance optimization
  nginx:
    image: nginx:alpine
    container_name: pi5-nginx-optimized
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.optimized.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - pi5-network
    logging: *default-logging
    <<: *restart-policy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      <<: *healthcheck-defaults

  # Prometheus with optimized configuration
  prometheus:
    image: prom/prometheus:latest
    container_name: pi5-prometheus-optimized
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=1GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infrastructure/monitoring/prometheus.optimized.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pi5-network
    logging: *default-logging
    <<: *restart-policy
    healthcheck:
      test: ["CMD-SHELL", "promtool query instant 'up' || exit 1"]
      <<: *healthcheck-defaults

  # Grafana with provisioning
  grafana:
    image: grafana/grafana:latest
    container_name: pi5-grafana-optimized
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_LOG_LEVEL: warn
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3100:3000"
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - pi5-network
    logging: *default-logging
    <<: *restart-policy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      <<: *healthcheck-defaults

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  pi5-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1